[{"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\index.js":"1","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\App.js":"2","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Common\\ScrollToTop.js":"3","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\Home.js":"4","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\LinearRegression\\LinearRegressionAlgorithm.js":"5","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\NearestNeighbors\\KNearestNeighborAlgorithm.js":"6","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\LogisticRegression\\LogisticRegressionAlgorithm.js":"7","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\NeuralNetwork\\NeuralNetworkAlgorithm.js":"8","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\KMean\\KMeanAlgorithm.js":"9","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\ObjectDetection\\ObjectDetectionAlgorithm.js":"10","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\FirstSegment\\Veil.js":"11","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\Menu.js":"12","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\Algorithms.js":"13","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\FirstSegment\\Navbar.js":"14","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Menu.js":"15","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\FirstSegment\\Sketch.js":"16","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\ThirdSegment\\PoweredBy.js":"17","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\FourthSegment\\AboutUs.js":"18","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Panel\\LeftPanel.js":"19","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Panel\\PanelSection.js":"20","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Panel\\RightPanel.js":"21","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Panel\\PanelChild.js":"22","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\linearregression\\Wrapper.js":"23","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\kmeanclustering\\Clustering.js":"24","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\neuralnetwork\\NeuralNetwork.js":"25","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\logisticregression\\LositicRegression.js":"26","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\nearestneighbors\\NearestNeighbor.js":"27","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\objectdetection\\ObjectDetection.js":"28","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\AlgorithmCarousel.js":"29","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\ThirdSegment\\TensorflowCard.js":"30","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\ThirdSegment\\P5Card.js":"31","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\ThirdSegment\\ConvNetCard.js":"32","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\kmeanclustering\\ControlPanel.js":"33","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\linearregression\\LinearRegression.js":"34","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\kmeanclustering\\cluster.js":"35","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\neuralnetwork\\Model.js":"36","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\neuralnetwork\\ControlPanel.js":"37","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\logisticregression\\Model.js":"38","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\logisticregression\\ControlPanel.js":"39","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\nearestneighbors\\point.js":"40","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\nearestneighbors\\ControlPanel.js":"41","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\common\\point.js":"42","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\NeuralNetworkCard.js":"43","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\LinearRegressionCard.js":"44","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\LogisticRegressionCard.js":"45","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\ObjectDetectionCard.js":"46","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\KNearestNeighborsCard.js":"47","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\KMeanCard.js":"48","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\linearregression\\Model.js":"49","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\neuralnetwork\\StartStopButton.js":"50"},{"size":437,"mtime":1610153713855,"results":"51","hashOfConfig":"52"},{"size":1922,"mtime":1610153998363,"results":"53","hashOfConfig":"52"},{"size":401,"mtime":1610153713775,"results":"54","hashOfConfig":"52"},{"size":1965,"mtime":1610153713787,"results":"55","hashOfConfig":"52"},{"size":7019,"mtime":1610153713764,"results":"56","hashOfConfig":"52"},{"size":6168,"mtime":1610153912710,"results":"57","hashOfConfig":"52"},{"size":8640,"mtime":1610153713767,"results":"58","hashOfConfig":"52"},{"size":8695,"mtime":1610153921634,"results":"59","hashOfConfig":"52"},{"size":7772,"mtime":1610153897323,"results":"60","hashOfConfig":"52"},{"size":5220,"mtime":1610153931415,"results":"61","hashOfConfig":"52"},{"size":682,"mtime":1610153713782,"results":"62","hashOfConfig":"52"},{"size":2559,"mtime":1610154713854,"results":"63","hashOfConfig":"52"},{"size":399,"mtime":1610153713795,"results":"64","hashOfConfig":"52"},{"size":366,"mtime":1610153713778,"results":"65","hashOfConfig":"52"},{"size":2316,"mtime":1605625603433,"results":"66","hashOfConfig":"52"},{"size":3064,"mtime":1610153713780,"results":"67","hashOfConfig":"52"},{"size":3050,"mtime":1610153713823,"results":"68","hashOfConfig":"52"},{"size":3002,"mtime":1610157241092,"results":"69","hashOfConfig":"52"},{"size":769,"mtime":1604240978267,"results":"70","hashOfConfig":"52"},{"size":830,"mtime":1604282243756,"results":"71","hashOfConfig":"52"},{"size":1167,"mtime":1606468740057,"results":"72","hashOfConfig":"52"},{"size":962,"mtime":1604238128990,"results":"73","hashOfConfig":"52"},{"size":177,"mtime":1604309108166,"results":"74","hashOfConfig":"52"},{"size":8110,"mtime":1604397416265,"results":"75","hashOfConfig":"52"},{"size":7181,"mtime":1604395890623,"results":"76","hashOfConfig":"52"},{"size":6841,"mtime":1604398025708,"results":"77","hashOfConfig":"52"},{"size":8797,"mtime":1604397606937,"results":"78","hashOfConfig":"52"},{"size":3189,"mtime":1605663202849,"results":"79","hashOfConfig":"52"},{"size":1526,"mtime":1610153713793,"results":"80","hashOfConfig":"52"},{"size":662,"mtime":1610153713825,"results":"81","hashOfConfig":"52"},{"size":582,"mtime":1610153713820,"results":"82","hashOfConfig":"52"},{"size":659,"mtime":1610153713817,"results":"83","hashOfConfig":"52"},{"size":526,"mtime":1604325511400,"results":"84","hashOfConfig":"52"},{"size":5119,"mtime":1604397940840,"results":"85","hashOfConfig":"52"},{"size":492,"mtime":1604306353869,"results":"86","hashOfConfig":"52"},{"size":1957,"mtime":1604306331944,"results":"87","hashOfConfig":"52"},{"size":1721,"mtime":1604386940218,"results":"88","hashOfConfig":"52"},{"size":1752,"mtime":1604306331750,"results":"89","hashOfConfig":"52"},{"size":1183,"mtime":1604386951825,"results":"90","hashOfConfig":"52"},{"size":616,"mtime":1604306331877,"results":"91","hashOfConfig":"52"},{"size":1771,"mtime":1604387096647,"results":"92","hashOfConfig":"52"},{"size":138,"mtime":1604306369990,"results":"93","hashOfConfig":"52"},{"size":886,"mtime":1610153713810,"results":"94","hashOfConfig":"52"},{"size":891,"mtime":1610153713804,"results":"95","hashOfConfig":"52"},{"size":909,"mtime":1610153713807,"results":"96","hashOfConfig":"52"},{"size":883,"mtime":1610153713813,"results":"97","hashOfConfig":"52"},{"size":902,"mtime":1610153713801,"results":"98","hashOfConfig":"52"},{"size":845,"mtime":1610153713798,"results":"99","hashOfConfig":"52"},{"size":1207,"mtime":1604304055904,"results":"100","hashOfConfig":"52"},{"size":747,"mtime":1604321111622,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"xilgh4",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"104"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\index.js",[],["220","221"],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\App.js",["222"],"import './App.css';\r\nimport Home from './components/Home/Home';\r\n\r\n//using react-router\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n//import types from Algorithm\r\nimport RegressionAlgorithm from \"./components/Algorithm/Types/LinearRegression/LinearRegressionAlgorithm\";\r\nimport LogisiticAlgorithm from \"./components/Algorithm/Types/LogisticRegression/LogisticRegressionAlgorithm\";\r\nimport NeuralNetworkAlgorithm from \"./components/Algorithm/Types/NeuralNetwork/NeuralNetworkAlgorithm\";\r\nimport KMeanClusteringAlgorithm from \"./components/Algorithm/Types/KMean/KMeanAlgorithm\";\r\nimport KNearestNeighborAlgorithm from \"./components/Algorithm/Types/NearestNeighbors/KNearestNeighborAlgorithm\";\r\nimport ObjectDetectionAlgorithm from \"./components/Algorithm/Types/ObjectDetection/ObjectDetectionAlgorithm\";\r\n\r\n//import component for scrolling control\r\nimport ScrollToTop from \"./components/Common/ScrollToTop\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <BrowserRouter>\r\n            <ScrollToTop/>\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Home />\r\n              </Route>\r\n\r\n              <Route path=\"/chapter1\">\r\n                <RegressionAlgorithm />\r\n              </Route>\r\n\r\n              <Route path=\"/chapter2\">\r\n                <LogisiticAlgorithm />\r\n              </Route>\r\n\r\n              <Route path=\"/chapter3\">\r\n                <NeuralNetworkAlgorithm/>\r\n              </Route>\r\n\r\n              <Route path=\"/chapter4\">\r\n                <ObjectDetectionAlgorithm/>\r\n              </Route>\r\n\r\n              <Route path=\"/chapter5\">\r\n                <KNearestNeighborAlgorithm/>\r\n              </Route>\r\n\r\n              <Route path=\"/chapter6\">\r\n                <KMeanClusteringAlgorithm/>\r\n              </Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Common\\ScrollToTop.js",["223"],"import React, {Component} from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nclass ScrollToTop extends Component{\r\n    componentDidUpdate(){\r\n        this.scrollToTop();\r\n    }\r\n\r\n    scrollToTop(){\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior:\"smooth\"\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\Home.js",["224","225","226"],"import {Component, useRef} from \"react\";\r\nimport React from \"react\";\r\nimport Navbar from \"./FirstSegment/Navbar\";\r\nimport Veil from \"./FirstSegment/Veil\";\r\nimport Algorithms from \"./SecondSegment/Algorithms\";\r\nimport PoweredBy from \"./ThirdSegment/PoweredBy\";\r\nimport AboutUs from \"./FourthSegment/AboutUs\";\r\nimport Sketch from \"./FirstSegment/Sketch\";\r\n\r\nclass Home extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        this.SmoothVerticalScrolling = this.SmoothVerticalScrolling.bind(this);\r\n    }\r\n\r\n    //smooth scrolling\r\n     SmoothVerticalScrolling(){\r\n         this.myRef.current.scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'start'\r\n         });\r\n     }\r\n\r\n    render(){\r\n        {/*Name of the classes are snap-etc as snap effects are intended for usage*/}\r\n        return(\r\n            <div className=\"snap-container\">\r\n                <section style={{position: \"fixed\", zIndex: -100}}>\r\n                    <Sketch/> {/*star animation*/}\r\n                </section>\r\n                {/*first segment*/}\r\n                <section className=\"snap-child\">\r\n                    <Veil smoothScroll={this.SmoothVerticalScrolling}/> {/*introduction panel component - status - in production*/}\r\n                </section>\r\n\r\n                {/*second segment*/}\r\n                <section className=\"snap-child\" ref={this.myRef}>\r\n                    <Algorithms /> {/*the algorithm carousel component - status - in production*/}\r\n                </section>\r\n\r\n                {/*third segment*/}\r\n                <section className=\"snap-child\" id=\"powered-by-section\">\r\n                    <PoweredBy/>\r\n                </section>\r\n\r\n                {/*fourth segment*/}\r\n                <section className=\"snap-child\" id=\"about-us-section\">\r\n                    <AboutUs/>\r\n                </section>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\LinearRegression\\LinearRegressionAlgorithm.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\NearestNeighbors\\KNearestNeighborAlgorithm.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\LogisticRegression\\LogisticRegressionAlgorithm.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\NeuralNetwork\\NeuralNetworkAlgorithm.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\KMean\\KMeanAlgorithm.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Types\\ObjectDetection\\ObjectDetectionAlgorithm.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\FirstSegment\\Veil.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\Menu.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\Algorithms.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\FirstSegment\\Navbar.js",["227","228"],"import Menu from \"../Menu.js\";\r\nimport logo from \"../../../images/logo.jpg\";\r\n\r\n//Link router\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Navbar = (props) => {\r\n    return(\r\n        <nav className=\"navbar\" style={\r\n            {\r\n                height: \"10%\"\r\n            }\r\n        }>\r\n            <Menu />\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Menu.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\FirstSegment\\Sketch.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\ThirdSegment\\PoweredBy.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\FourthSegment\\AboutUs.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Panel\\LeftPanel.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Panel\\PanelSection.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Panel\\RightPanel.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Panel\\PanelChild.js",["229"],"import React from 'react';\r\nimport Panel from './PanelSection';\r\n\r\nclass PanelChild extends React.Component {\r\n    isBottom(el) {\r\n        return el.getBoundingClientRect().bottom <= window.innerHeight + 10;\r\n    }\r\n\r\n    componentDidMount() {\r\n        document\r\n            .addEventListener('scroll', this.trackScrolling);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document\r\n            .removeEventListener('scroll', this.trackScrolling);\r\n    }\r\n\r\n    trackScrolling = () => {\r\n        const wrappedElement = document.getElementById(\"algo-panel-child\" + this.props.index);\r\n        if (this.isBottom(wrappedElement)) {\r\n            //Call props\r\n            this.props.onScrollTo(this.props.index);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return <div className=\"algo-panel-child\" id={\"algo-panel-child\" + this.props.index}>\r\n            {\r\n                this.props.children\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default PanelChild;","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\linearregression\\Wrapper.js",["230"],"import React, { useState } from 'react';\r\nimport Sketch from './LinearRegression';\r\n\r\nfunction Wrapper() {\r\n  return <div>\r\n    <Sketch/>\r\n  </div>\r\n}\r\n\r\nexport default Wrapper;","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\kmeanclustering\\Clustering.js",["231","232","233","234"],"import Sketch from 'react-p5';\r\nimport Point from '../common/point';\r\nimport ClusterCore from './cluster';\r\nimport ControlPanel from './ControlPanel';\r\n\r\n//Save state outside components -> Need rethink\r\n//Create cores\r\nlet ORIGINS = [\r\n    [100, 150],\r\n    [500, 150],\r\n    [300, 500]\r\n];\r\nlet points = [];\r\nlet cores;\r\n\r\n//Save reference to p5 for math utils\r\nlet p5Ref;\r\n\r\n//Hold points and cores\r\nlet POINT_RADIUS = 15;\r\n\r\n//Sizes\r\nlet width, height, display;\r\n\r\nexport default (props) => {\r\n    //Function to create cores and cluster\r\n    const generateCluster = () => {\r\n        //Clear previous point\r\n        points = [];\r\n        \r\n        //Create points around the core\r\n        ORIGINS.forEach(core => {\r\n            //Create 30 points around each core\r\n            for (let i = 0; i != 30; ++i) {\r\n                let x = -1;\r\n                let y = -1;\r\n\r\n                while(!(x >= POINT_RADIUS && x <= width - POINT_RADIUS && y >= POINT_RADIUS && y <= height - POINT_RADIUS)) {\r\n                    x = core[0] + p5Ref.randomGaussian(0, POINT_RADIUS * 2);\r\n                    y = core[1] + p5Ref.randomGaussian(0, POINT_RADIUS * 2);\r\n                }\r\n\r\n                points.push(new Point(x, y, null));\r\n            }\r\n        });\r\n    }\r\n\r\n    const generateCores = () => {\r\n        //Clear previous cores\r\n        cores = [];\r\n        \r\n        //Create 3 cores\r\n        for (let i = 0; i != 3; ++i) {\r\n            //Random core initialization\r\n            let x = p5Ref.random(10, width - 10);\r\n            let y = p5Ref.random(10, height - 10);\r\n            \r\n            cores.push(new ClusterCore(x, y, i));\r\n        }\r\n    }\r\n\r\n    const distance = (point, core) => {\r\n        return p5Ref.sqrt(p5Ref.sq(point.x - core.x) + p5Ref.sq(point.y - core.y));\r\n    }\r\n\r\n    const update = () => {\r\n        //Clear children first\r\n        cores.forEach(core => {\r\n            core.clearChildren();\r\n        });\r\n  \r\n        points.forEach(p => {\r\n            //For each points -> calculate the distance to three cores\r\n            let minDistance = Infinity;\r\n            let minType = null;\r\n    \r\n            cores.forEach(core => {\r\n                //Get the distance\r\n                let dist = distance(p, core);\r\n                //Update the potential type\r\n                if (dist < minDistance) {\r\n                    minDistance = dist;\r\n                    minType = core.type;\r\n                }\r\n            });\r\n\r\n            \r\n            //Set the potential type to p\r\n            p.type = minType;\r\n                \r\n            //Add to minType child\r\n            cores[minType].addChild(p);\r\n        });\r\n        \r\n        //Calculate the target position for each core\r\n        cores.forEach(core => {\r\n            //Calculate the average of children coordinates\r\n            let sumX = 0;\r\n            let sumY = 0;\r\n            \r\n            core.children.forEach(p => {\r\n                sumX += p.x;\r\n                sumY += p.y;\r\n            });\r\n            \r\n            //Target position is the average\r\n            if (core.children.length != 0) {\r\n                let targetX = (sumX + 0.0) / core.children.length;\r\n                let targetY = (sumY + 0.0) / core.children.length;\r\n                \r\n                //Set position\r\n                core.setTarget(targetX, targetY);\r\n            }\r\n        });\r\n    }\r\n\r\n    //Handle user interactions\r\n    const onGenerateClusters = () => {\r\n        generateCluster();\r\n    }\r\n\r\n    const onGenerateCores = () => {\r\n        generateCores();\r\n    }\r\n\r\n    const scalePoints = (ratio) => {\r\n        points.forEach(point => {\r\n            point.x = point.x * ratio;\r\n            point.y = point.y * ratio;\r\n        });\r\n    }\r\n\r\n    //Handle resize\r\n    const windowResized = (p5) => {\r\n        //Get the new size\r\n        let newWidth = p5.windowWidth / 3;\r\n        let newHeight = p5.windowWidth / 3;\r\n        let newDisplay = p5.windowWidth / 6;\r\n\r\n        //Get the ratio\r\n        let ratio = newWidth / width;\r\n        POINT_RADIUS *= ratio;\r\n        scalePoints(ratio);\r\n\r\n        //Set new sizes\r\n        width = newWidth;\r\n        height = newHeight;\r\n        display = newDisplay\r\n\r\n        //Resize the canvas\r\n        p5.resizeCanvas(width + display, height);\r\n    }\r\n\r\n    //Set up and draw function\r\n    const setup = (p5, canvasParentRef) => {\r\n        //Create windows\r\n        width = p5.windowWidth / 3;\r\n        height = p5.windowWidth / 3;\r\n        display = p5.windowWidth / 6;\r\n\r\n        p5.createCanvas(width + display, height).parent(canvasParentRef);\r\n\r\n        //Save reference to use math functionality only\r\n        p5Ref = p5;\r\n\r\n        //Set font size\r\n        p5.textFont('Raleway');\r\n\r\n        //Set the origin points\r\n        ORIGINS = [\r\n            [width * 0.25, width * 0.25],\r\n            [width * 0.75, width * 0.25],\r\n            [width * 0.5, width * 0.75]\r\n        ];\r\n\r\n        //Generate cores\r\n        /*\r\n        generateCluster();\r\n        */\r\n        generateCores();\r\n    }\r\n\r\n    const draw = (p5) => {\r\n        p5.background(204);\r\n\r\n        //Move the cores into position\r\n        cores.forEach(core => {\r\n            if (core.target_x != null) {\r\n                core.setPosition(p5.lerp(core.x, core.target_x, 0.01), p5.lerp(core.y, core.target_y, 0.01));\r\n            }\r\n        })\r\n\r\n        //Visualize the points\r\n        p5.stroke('black');\r\n        points.forEach(p => {\r\n            p5.strokeWeight(2);\r\n            if (p.type === 0) {\r\n                p5.fill('#e63946');\r\n            } else if (p.type === 1) {\r\n                p5.fill('#457b9d');\r\n            } else if (p.type === 2) {\r\n                p5.fill('#2a9d8f');\r\n            } else {\r\n                p5.fill('#8d99ae');\r\n            }\r\n            \r\n            p5.circle(p.x, p.y, POINT_RADIUS);\r\n        });\r\n\r\n        //Visualize the cores\r\n        cores.forEach(core => {\r\n            if (core.type === 0) {\r\n                p5.fill('#e63946');\r\n            } else if (core.type === 1) {\r\n                p5.fill('#457b9d');\r\n            } else if (core.type === 2) {\r\n                p5.fill('#2a9d8f');\r\n            } else {\r\n                p5.fill('#8d99ae');\r\n            }\r\n            \r\n            p5.stroke('black');\r\n            p5.strokeWeight(5);\r\n            p5.circle(core.x, core.y, POINT_RADIUS * 1.5);\r\n        });\r\n\r\n        //Call update according to frame count\r\n        if (p5.frameCount % 15 === 0) {\r\n            update();\r\n        }\r\n        \r\n        //Draw panel\r\n        drawDisplayPanel(p5);\r\n    }\r\n\r\n    const drawDisplayPanel = (p5) => {\r\n        //Draw rectangle\r\n        p5.noStroke();\r\n        p5.fill(240);\r\n        p5.rect(width, 0, display, height);\r\n\r\n        //Display text\r\n        p5.fill(0);\r\n        p5.textSize(POINT_RADIUS);\r\n\r\n        //Display labels\r\n        p5.fill('#e63946')\r\n        p5.text('Red centroid', width + 20, 32);\r\n\r\n        p5.fill('#457b9d');\r\n        p5.text('Blue centriod', width + 20, 32 + POINT_RADIUS * 5);\r\n\r\n        p5.fill('#2a9d8f');\r\n        p5.text('Green centroid', width + 20, 32 + POINT_RADIUS * 10);\r\n\r\n        //Display position\r\n        p5.fill('black');\r\n        \r\n        //Red centroid\r\n        p5.text('x: ' + cores[0].x.toFixed(2).toString(), width + 40, 32 + POINT_RADIUS * 2);\r\n        p5.text('y: ' + cores[0].y.toFixed(2).toString(), width + 40, 32 + POINT_RADIUS * 3);\r\n\r\n        //Blue centroid\r\n        p5.text('x: ' + cores[1].x.toFixed(2).toString(), width + 40, 32 + POINT_RADIUS * 7);\r\n        p5.text('y: ' + cores[1].y.toFixed(2).toString(), width + 40, 32 + POINT_RADIUS * 8);\r\n\r\n        //Green centriod\r\n        p5.text('x: ' + cores[2].x.toFixed(2).toString(), width + 40, 32 + POINT_RADIUS * 12);\r\n        p5.text('y: ' + cores[2].y.toFixed(2).toString(), width + 40, 32 + POINT_RADIUS * 13);\r\n    }\r\n\r\n    return <div>\r\n        <Sketch\r\n            setup={setup}\r\n            draw={draw}\r\n            windowResized={windowResized}/>\r\n\r\n        <ControlPanel\r\n            onGenerateClusters={onGenerateClusters}\r\n            onGenerateCores={onGenerateCores}/>\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\neuralnetwork\\NeuralNetwork.js",["235","236","237","238","239"],"import Model from './Model';\r\nimport Sketch from 'react-p5';\r\nimport ControlPanel from './ControlPanel';\r\nimport Point from '../common/point';\r\n\r\n//Store state outside -> Need refractoring\r\n//Initialize a model\r\nlet model = new Model();\r\n\r\n//Current points\r\nlet points = [];\r\n\r\n//Select the type of point you want to use\r\nlet currentType = 1;\r\nconst changeType = (type) => {\r\n    currentType = type;\r\n}\r\n\r\n//Training state -> Check if training has begun\r\nlet isTraining = false;\r\nlet hasConverged = false;\r\n\r\n//Save losses\r\nlet losses = [];\r\n\r\n//Segments for illusrating the prediction boundary\r\nconst SEG_SIZE = 10;\r\nlet segments = [];\r\n\r\nexport default (props) => {\r\n    //Handle user interactions\r\n    const startTraining = () => {\r\n        isTraining = true;\r\n    }\r\n\r\n    const stopTraining = () => {\r\n        isTraining = false;\r\n    }\r\n\r\n    const reset = () => {\r\n        //Create new model\r\n        model = new Model();\r\n        points = [];\r\n        losses = [];\r\n        isTraining = false;\r\n        hasConverged = false;\r\n    }\r\n\r\n    //Initialize segments\r\n    function createSegments(width, height, p5) {\r\n        //Initialize segements\r\n        segments = []; ///Reset\r\n        for (let r = 0; r != Math.round(width / SEG_SIZE) + 1; r++) {\r\n            for (let c = 0; c != Math.round(height / SEG_SIZE) + 1; ++c) {\r\n                //Apppent to segments\r\n                segments.push([c * SEG_SIZE, r * SEG_SIZE]);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Helper function\r\n    const trainModel = () => {\r\n        //Make datapoints\r\n        let data = [];\r\n        let labels = [];\r\n        \r\n        points.forEach(p => {\r\n            //Add data and label\r\n            data.push([p.x, p.y]);\r\n            labels.push(p.type);\r\n        })\r\n        \r\n        //Train model\r\n        return model.train(data, labels);\r\n    }\r\n\r\n    //Predict segments -> Illustrate\r\n    const displaySegments = (p5) => {\r\n        p5.noStroke();\r\n\r\n        for (let i = 0; i != segments.length; ++i) {\r\n            //Get the segment location -> Map back to canvas\r\n            let x = p5.map(segments[i][0], 0, p5.width, 0, 1);\r\n            let y = p5.map(segments[i][1], 0, p5.height, 1, 0);\r\n            \r\n            //Get prob\r\n            let prob = model.predict([x, y]);\r\n        \r\n            //Draw \r\n            if (prob > 0.5) {\r\n              p5.fill('rgba(69, 123, 157, ' + (prob/2).toString() + ')');\r\n            } else {\r\n              p5.fill('rgba(244, 162, 97, ' + ((1-prob)/2).toString() +')');\r\n            }\r\n\r\n            p5.rect(segments[i][0], segments[i][1], SEG_SIZE, SEG_SIZE);\r\n        }\r\n    }\r\n\r\n    //Handle windows resize\r\n    const windowResize = (p5) => {\r\n        p5.resizeCanvas(p5.windowWidth / 4, p5.windowWidth / 4);\r\n        createSegments(p5.windowWidth / 4, p5.windowWidth / 4, p5);\r\n    }\r\n\r\n    //Set up and draw for left canvas\r\n    const leftSetup = (p5, canvasParentRef) => {\r\n        //Set canvas size dynamically\r\n        const width = p5.windowWidth / 4, height = p5.windowWidth / 4;\r\n        p5.createCanvas(width, height).parent(canvasParentRef);\r\n\r\n        //Create segments for illustrating\r\n        createSegments(width, height, p5);\r\n    }\r\n\r\n    const leftDraw = (p5) => {\r\n        p5.background(204);\r\n\r\n        p5.noStroke();\r\n\r\n        points.forEach(p => {\r\n            //Map canvas coordinates to [0,1]\r\n            let x = p5.map(p.x, 0, 1, 0, p5.width);\r\n            let y = p5.map(p.y, 0, 1, p5.height, 0);\r\n\r\n            if (p.type == 0) {\r\n                p5.fill('#F4A261');\r\n            } else {\r\n                p5.fill('#457B9D');\r\n            }\r\n\r\n            p5.circle(x, y, 10);\r\n        });\r\n\r\n        //Train model if has started\r\n        if (isTraining && !hasConverged) {\r\n            //Append loss\r\n            let loss = trainModel(p5);\r\n            losses.push(loss);\r\n\r\n            //Check if model has converged\r\n            if (losses.length >= 2 && Math.abs(losses[losses.length - 1] - losses[losses.length - 2]) <= 0.0001) {\r\n                hasConverged = true;\r\n            }\r\n        }\r\n\r\n        //Render predictions\r\n        if (losses.length > 0) {\r\n            displaySegments(p5);\r\n        }\r\n    }\r\n\r\n    const leftMouseClicked = (p5) => {\r\n        //Check mouse position if inside canvas\r\n        if (!isTraining && \r\n            losses.length === 0 &&\r\n            p5.mouseX > 0 && p5.mouseX <= p5.width && p5.mouseY > 0 && p5.mouseY <= p5.height) {\r\n            //Map canvas coordinates to [0,1]\r\n            let x = p5.map(p5.mouseX, 0, p5.width, 0, 1);\r\n            let y = p5.map(p5.mouseY, 0, p5.height, 1, 0);\r\n\r\n            //Create a point based on mouse position and current type\r\n            let point = new Point(x, y, currentType);\r\n\r\n            //Append to list\r\n            points.push(point);\r\n        }\r\n    }\r\n\r\n    //Set up and draw for right canvas\r\n    const rightSetup = (p5, canvasParentRef) => {\r\n        const width = p5.windowWidth / 4, height = p5.windowWidth / 4;\r\n        p5.createCanvas(width, height).parent(canvasParentRef);\r\n\r\n        //Set font\r\n        p5.textFont('Raleway');\r\n    }\r\n\r\n    const rightDraw = (p5) => {\r\n        p5.background(255);\r\n\r\n        if (losses.length > 0) {\r\n            drawLosses(p5);\r\n        }\r\n    }\r\n\r\n    const drawLosses = (p5) => {\r\n        //Calculate the current x offset\r\n        let offset = 40;\r\n        let offSetChange = (p5.width - offset * 2) / (losses.length);\r\n\r\n        //Get the latest loss -> Display\r\n        p5.textSize(20);\r\n        p5.fill('#ddbea9');\r\n        p5.strokeWeight(1);\r\n        p5.textFont('Raleway');\r\n        p5.text('Loss: ' + losses[losses.length - 1].toFixed(4).toString(), 40, 20);\r\n\r\n        //Check if converge\r\n        if (hasConverged) {\r\n            p5.fill('#2a9d8f');\r\n            p5.noStroke();\r\n            p5.textFont('Raleway');\r\n            p5.text('Converged', 40, 40);\r\n        }\r\n\r\n        //Draw line chart showing plots\r\n        p5.noFill();\r\n        p5.stroke('#f9dcc4');\r\n        p5.strokeWeight(3);\r\n        p5.beginShape();\r\n\r\n        losses.forEach((loss) => {\r\n            //Map the loss\r\n            let mappedLoss;\r\n            mappedLoss = p5.map(loss, 0, losses[0], p5.height, p5.width / 2);\r\n\r\n            //Draw vertex \r\n            p5.vertex(offset, mappedLoss);\r\n            //Increase offset\r\n            offset += offSetChange;\r\n        })\r\n\r\n        p5.endShape();\r\n    }\r\n\r\n    return <div>\r\n        <div style={{float: \"left\"}}>\r\n            <Sketch \r\n                setup={leftSetup}\r\n                draw={leftDraw}\r\n                mouseClicked={leftMouseClicked}\r\n                windowResized={windowResize}\r\n                > \r\n            </Sketch>\r\n        </div>\r\n\r\n        <div style={{float: \"left\"}}>\r\n            <Sketch \r\n                setup={rightSetup}\r\n                draw={rightDraw}\r\n                windowResized={windowResize}> \r\n            </Sketch>\r\n        </div>\r\n\r\n        <div style={{clear: \"both\"}}></div>\r\n\r\n        <ControlPanel\r\n            onChangeType={changeType}\r\n            onStart={startTraining}\r\n            onStop={stopTraining}\r\n            onReset={reset}>\r\n        </ControlPanel>\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\logisticregression\\LositicRegression.js",["240","241","242","243","244"],"import Sketch from 'react-p5';\r\nimport Model from './Model';\r\nimport Point from '../common/point';\r\nimport ControlPanel from './ControlPanel';\r\n\r\n//Save state outside components -> Need refractoring\r\n//Create model\r\nlet model = new Model();\r\n\r\n//Save losses\r\nlet losses = [];\r\nlet hasConverged = false;\r\n\r\n//List of points\r\nlet points = [];\r\n\r\n//List of segments for visualizing purpose\r\nconst SEG_SIZE = 10;\r\nlet segments = [];\r\n\r\nexport default (props) => {\r\n    //Current type of point\r\n    let currentType = 1;\r\n\r\n    const changeType = (type) => {\r\n        currentType = type;\r\n    }\r\n\r\n    const reset = () => {\r\n        points = [];\r\n        losses = [];\r\n        hasConverged = false;\r\n    }\r\n\r\n    //Train model and render result\r\n    const trainModel = () => {\r\n        //Convert points to x and y\r\n        let x = [];\r\n        let y = [];\r\n\r\n        points.forEach(p => {\r\n            x.push([p.x, p.y]);\r\n        });\r\n\r\n        points.forEach(p => {\r\n            y.push(p.type);\r\n        });\r\n\r\n        //Train model\r\n        return model.train(x, y);\r\n    }\r\n\r\n    const renderPredictions = (p5) => {\r\n        for (let i = 0; i != segments.length; ++i) {\r\n            //Get the segment location -> Map back to canvas\r\n            let x = p5.map(segments[i][0], 0, 1, 0, p5.width);\r\n            let y = p5.map(segments[i][1], 0, 1, p5.height, 0);\r\n            \r\n            //Get prob\r\n            let prob = model.predict([segments[i][0], segments[i][1]]);\r\n        \r\n            //Draw \r\n            if (prob > 0.5) {\r\n              p5.fill('rgba(69, 123, 157, ' + (prob/2).toString() + ')');\r\n            } else {\r\n              p5.fill('rgba(244, 162, 97, ' + ((1-prob)/2).toString() +')');\r\n            }\r\n            p5.noStroke();\r\n            p5.rect(x, y, SEG_SIZE, SEG_SIZE);\r\n        }\r\n    }\r\n\r\n    //Handle windows resize\r\n    const leftWindowResize = (p5) => {\r\n        let width = p5.windowWidth / 4, height = p5.windowWidth / 4;\r\n        p5.resizeCanvas(width, height);\r\n        initializeSegments(width, height, p5);\r\n    }\r\n\r\n    const rightWindowResize = (p5) => {\r\n        let width = p5.windowWidth / 4, height = p5.windowWidth / 4;\r\n        p5.resizeCanvas(width, height);\r\n    }\r\n\r\n    const leftSetup = (p5, canvasParentRef) => {\r\n        //Set canvas size\r\n        let width = p5.windowWidth / 4, height = p5.windowWidth / 4;\r\n        p5.createCanvas(width, height).parent(canvasParentRef);\r\n        initializeSegments(width, height, p5);\r\n    }\r\n\r\n    const initializeSegments = (width, height, p5) => {\r\n        segments = []; ///Reset\r\n        for (let r = 0; r != Math.round(width / SEG_SIZE); r++) {\r\n            for (let c = 0; c != Math.round(height / SEG_SIZE); ++c) {\r\n                //Map to [0, 1] interval\r\n                let x = p5.map(c * SEG_SIZE, 0, width, 0, 1);\r\n                let y = p5.map(r * SEG_SIZE, height, 0, 0, 1);\r\n                //Apppent to segments\r\n                segments.push([x, y]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const leftDraw = (p5) => {\r\n        p5.background(204);\r\n\r\n        //Draw the existing points\r\n        p5.strokeWeight(1);\r\n        points.forEach(p => {\r\n            //Translate coordinates\r\n            let x = p5.map(p.x, 0, 1, 0, p5.width);\r\n            let y = p5.map(p.y, 0, 1, p5.height, 0);\r\n            \r\n            //Draw a circle\r\n            p5.noStroke();\r\n            if (p.type === 0) {\r\n                p5.fill('#F4A261');\r\n            } else if (p.type == 1) {\r\n                p5.fill('#457B9D');\r\n            }\r\n            \r\n            p5.circle(x, y, 10);\r\n        });\r\n\r\n        //Train model\r\n        if (points.length > 0 && !hasConverged) {\r\n            //Train model and get loss\r\n            losses.push(trainModel());\r\n\r\n            //Check if model has converged\r\n            if (losses.length >= 2 && Math.abs(losses[losses.length - 1] - losses[losses.length - 2]) <= 0.01) {\r\n                hasConverged = true;\r\n            }\r\n        }\r\n\r\n        //Show\r\n        if (losses.length > 0) {\r\n            renderPredictions(p5);\r\n        }\r\n    }\r\n\r\n    const leftMouseClicked = (p5) => {\r\n        //Check if mouse is in bound\r\n        if (p5.mouseX > 0 && p5.mouseX <= p5.width && p5.mouseY > 0 && p5.mouseY <= p5.height) {\r\n            //Create a point\r\n            let x = p5.map(p5.mouseX, 0, p5.width, 0, 1);\r\n            let y = p5.map(p5.mouseY, 0, p5.height, 1, 0);\r\n\r\n            //Append to list of points\r\n            points.push(new Point(x, y, currentType));\r\n\r\n            //Dismissed hasConverged and losses\r\n            hasConverged = false;\r\n            losses = [];\r\n        }\r\n    }\r\n\r\n    //Draw loss\r\n    const rightSetup = (p5, canvasParentRef) => {\r\n        p5.createCanvas(p5.windowWidth / 4, p5.windowWidth / 4).parent(canvasParentRef);\r\n    }\r\n\r\n    const rightDraw = (p5) => {\r\n        p5.background(255);\r\n\r\n        if (losses.length > 0) {\r\n            drawLosses(p5);\r\n        }\r\n    }\r\n\r\n    const drawLosses = (p5) => {\r\n        p5.stroke('#457B9D');\r\n\r\n        //Calculate the current x offset\r\n        let offset = 40;\r\n        let offSetChange = (p5.width - offset * 2) / (losses.length);\r\n\r\n        //Get the latest loss -> Display\r\n        p5.textSize(20);\r\n        p5.fill('#457B9D');\r\n        p5.strokeWeight(1);\r\n        p5.textFont('Raleway');\r\n        p5.text('Loss: ' + losses[losses.length - 1].toFixed(4).toString(), 40, 20);\r\n\r\n        //Check if converge\r\n        if (hasConverged) {\r\n            p5.fill('#2a9d8f');\r\n            p5.noStroke();\r\n            p5.textFont('Raleway');\r\n            p5.text('Converged', 40, 40);\r\n        }\r\n\r\n        //Draw line chart showing plots\r\n        p5.noFill();\r\n        p5.stroke('#457B9D');\r\n        p5.strokeWeight(3);\r\n        p5.beginShape();\r\n\r\n        losses.forEach((loss) => {\r\n            //Map the loss\r\n            let mappedLoss;\r\n            mappedLoss = p5.map(loss, 0, losses[0], p5.height, p5.width / 2);\r\n\r\n            //Draw vertex \r\n            p5.vertex(offset, mappedLoss);\r\n\r\n            //Increase offset\r\n            offset += offSetChange;\r\n        })\r\n\r\n        p5.endShape();\r\n    }\r\n\r\n    return <div>\r\n        <div style={{float: \"left\"}}>\r\n            <Sketch \r\n                setup={leftSetup} \r\n                draw={leftDraw}\r\n                mouseClicked={leftMouseClicked}\r\n                windowResized={leftWindowResize}>\r\n            </Sketch>\r\n        </div>\r\n\r\n        <div style={{float: \"left\"}}>\r\n            <Sketch \r\n                setup={rightSetup} \r\n                draw={rightDraw}\r\n                windowResized={rightWindowResize}>\r\n            </Sketch>\r\n        </div>\r\n\r\n        <div style={{clear: \"both\"}}></div>\r\n        \r\n        <ControlPanel\r\n            onChangeType={(type) => changeType(type)}\r\n            onReset={() => reset()}\r\n        />\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\nearestneighbors\\NearestNeighbor.js",["245","246","247"],"import { StaticPoint, DynamicPoint } from './point';\r\nimport Sketch from 'react-p5';\r\nimport ControlPanel from './ControlPanel';\r\n\r\n//Save state outside components -> Need to rethink\r\nlet staticPoints = [];\r\nlet neighbors = 5;\r\nlet neighborCounts;\r\n\r\n//Core points to cluster around\r\nlet corePoints = [];\r\n\r\n//Create user-controlled point\r\nlet dynamicPoint = new DynamicPoint(-100, -100);\r\n\r\n//Sizes\r\nlet width, height, display;\r\n\r\n//Create holder for points\r\nlet POINT_RADIUS = 15;\r\n\r\n//Hold ref to p5 for math functionality\r\nlet p5Ref;\r\n\r\nexport default (props) => {\r\n    //Function to draw a point\r\n    const drawPoint = (p5, p) => {\r\n        p5.stroke('black');\r\n        if (p.type === 0) {\r\n            p5.fill('#e63946');\r\n        } else if (p.type === 1) {\r\n            p5.fill('#457b9d');\r\n        } else if (p.type === 2) {\r\n            p5.fill('#2a9d8f');\r\n        } else {\r\n            p5.fill('#8d99ae');\r\n        }\r\n        p5.circle(p.x, p.y, POINT_RADIUS);\r\n    }\r\n\r\n    //Function to draw display panel\r\n    const translateClass = (name) => {\r\n        if (name === 0) {\r\n            return \"Red\";\r\n        } else if (name === 1){\r\n            return \"Blue\";\r\n        } else if (name === 2) {\r\n            return \"Green\";\r\n        } else {\r\n            return \"Not found\";\r\n        }\r\n    }\r\n\r\n    const drawDisplayPanel = (p5) => {\r\n        //Use white background color\r\n        p5.fill(240);\r\n        p5.noStroke();\r\n        p5.rect(width, 0, display, height);\r\n\r\n        //Write text\r\n        p5.fill(0);\r\n        p5.textSize(POINT_RADIUS);\r\n\r\n        //Draw number of neighbors\r\n        p5.text('K: ' + neighbors.toString(), width + 20, 32)\r\n\r\n        //Draw chosen class\r\n        p5.text('Class: ', width + 20, 64);\r\n        if (dynamicPoint.type === 0) {\r\n            p5.fill('#e63946');\r\n        } else if (dynamicPoint.type === 1) {\r\n            p5.fill('#457b9d');\r\n        } else if (dynamicPoint.type === 2) {\r\n            p5.fill('#2a9d8f');\r\n        } else {\r\n            p5.fill('#8d99ae');\r\n        }\r\n        p5.text(translateClass(dynamicPoint.type), width + 20 + POINT_RADIUS * 3, 64);\r\n\r\n        //Draw neighbors count\r\n        p5.fill(0);\r\n        p5.text('Red neighbors: ', width + 20, 96);\r\n        p5.text('Blue neighbors: ', width + 20, 128);\r\n        p5.text('Green neighbors: ', width + 20, 160);\r\n\r\n        p5.fill('#e63946');\r\n        p5.text((neighborCounts ? neighborCounts[0].toString() : \"0\"), width + 20 + POINT_RADIUS * 8, 96);\r\n        p5.fill('#457b9d');\r\n        p5.text((neighborCounts ? neighborCounts[1].toString() : \"0\"), width + 20 + POINT_RADIUS * 8, 128);\r\n        p5.fill('#2a9d8f');\r\n        p5.text((neighborCounts ? neighborCounts[2].toString() : \"0\"), width + 20 + POINT_RADIUS * 8, 160);\r\n    }\r\n\r\n    //Function to generate static points around cores\r\n    const generateStaticPoints = () => {\r\n        //Clear existing\r\n        staticPoints = [...corePoints];\r\n        \r\n        //Populate static points using random data\r\n        corePoints.forEach(core => {\r\n            //Create about 10 data points for each core points\r\n            for (let i = 0; i != 30; ++i) {\r\n                //Create points\r\n                let x = core.x + p5Ref.randomGaussian(0, 50);\r\n                let y = core.y + p5Ref.randomGaussian(0, 50);\r\n\r\n                //Check in boud\r\n                while (!(x >= POINT_RADIUS && x < width - POINT_RADIUS && y >= POINT_RADIUS && y < height - POINT_RADIUS)) {\r\n                    x = core.x + p5Ref.randomGaussian(0, 50);\r\n                    y = core.y + p5Ref.randomGaussian(0, 50);\r\n                }\r\n\r\n                //Add points\r\n                staticPoints.push(new StaticPoint(x, y, core.type));\r\n            }\r\n        });\r\n    }\r\n\r\n    const scalePoints = (ratio) => {\r\n        staticPoints.forEach(point => {\r\n            point.x = point.x * ratio;\r\n            point.y = point.y * ratio;\r\n        });\r\n    }\r\n\r\n    //Function to find neighbors for the dynamic points\r\n    const findNeighbors = (total) => {\r\n        //map coordinates to [0, 1] interval\r\n        let uX = dynamicPoint.x\r\n        let uY = dynamicPoint.y\r\n        \r\n        staticPoints.forEach(sPoint => {\r\n            //map coordinates to [0, 1] interval\r\n            let sX = sPoint.x\r\n            let sY = sPoint.y\r\n            \r\n            //Calculate the eucleadian distance and add to list\r\n            sPoint.setDistance(Math.sqrt(Math.pow(uX - sX, 2) + Math.pow(uY - sY, 2)));\r\n        });\r\n        \r\n        //Sort to ascending order\r\n        let copiedPoints = staticPoints.slice();\r\n        copiedPoints.sort((a, b) => a.distanceToUser - b.distanceToUser);\r\n        \r\n        //Get closest neighbors\r\n        dynamicPoint.setNeighbors(copiedPoints.slice(0, total));\r\n    }\r\n\r\n    const findType = () => {\r\n        //Count neighbor type\r\n        let typeCounts = {\r\n            0: 0,\r\n            1: 0,\r\n            2: 0\r\n        }\r\n        \r\n        dynamicPoint.neighbors.forEach(p => {\r\n            typeCounts[p.type] += 1;\r\n        });\r\n\r\n        //Save neighbor counts\r\n        neighborCounts = typeCounts;\r\n        \r\n        //Get the type with highest count\r\n        let maxType = 0;\r\n        let maxCount = -1;\r\n        for (let i = 0; i != 3; ++i) {\r\n            if (typeCounts[i] > maxCount) {\r\n                maxType = i;\r\n                maxCount = typeCounts[i];\r\n            }\r\n        }\r\n        \r\n        dynamicPoint.setType(maxType);\r\n    }\r\n\r\n    //Handle user interaction\r\n    const onRegenerate = () => {\r\n        generateStaticPoints();\r\n        //Remove neighbors\r\n        dynamicPoint.neighbors = [];\r\n        dynamicPoint.type = null;\r\n    }\r\n\r\n    const onSetNeighbors = (totalNeighbors) => {\r\n        neighbors = parseInt(totalNeighbors);\r\n    }\r\n\r\n    //Handle resize\r\n    const windowResized = (p5) => {\r\n        //Get the new size\r\n        let newWidth = p5.windowWidth / 3;\r\n        let newHeight = p5.windowWidth / 3;\r\n        let newDisplay = p5.windowWidth / 6;\r\n\r\n        //Get the ratio\r\n        let ratio = newWidth / width;\r\n        POINT_RADIUS *= ratio;\r\n        scalePoints(ratio);\r\n\r\n        //Set new sizes\r\n        width = newWidth;\r\n        height = newHeight;\r\n        display = newDisplay\r\n\r\n        //Resize the canvas\r\n        p5.resizeCanvas(width + display, height);\r\n    }\r\n\r\n    //Set up and draw function for left canvas\r\n    const leftSetup = (p5, canvasParentRef) => {\r\n        //Create windows\r\n        width = p5.windowWidth / 3;\r\n        height = p5.windowWidth / 3;\r\n        display = p5.windowWidth / 6;\r\n        p5.createCanvas(width + display, height).parent(canvasParentRef);\r\n\r\n        //Set point radius\r\n        POINT_RADIUS = width / 30;\r\n\r\n        //Create cores\r\n        corePoints = [\r\n            new StaticPoint(width * 0.25, height * 0.3, 0),\r\n            new StaticPoint(width * 0.75, height * 0.3, 1),\r\n            new StaticPoint(width * 0.5, height * 0.75, 2)\r\n        ];\r\n\r\n        //Save reference to p5 library\r\n        p5Ref = p5;\r\n        p5.textFont('Raleway');\r\n\r\n        generateStaticPoints();\r\n    }\r\n\r\n    const leftDraw = (p5) => {\r\n        //Background\r\n        p5.background(204);\r\n\r\n        //Draw display panel\r\n        drawDisplayPanel(p5);\r\n\r\n        //Highlighting the user point's neighbors\r\n        dynamicPoint.neighbors.forEach(neighbor => {\r\n            //Draw line\r\n            p5.stroke('black');\r\n            p5.strokeWeight(2);\r\n            p5.line(dynamicPoint.x, dynamicPoint.y, neighbor.x, neighbor.y);\r\n            \r\n            //Highlight neigbors\r\n            p5.noFill();\r\n            p5.stroke('yellow');\r\n            p5.circle(neighbor.x, neighbor.y, POINT_RADIUS + 4);\r\n        });\r\n\r\n        //Draw points\r\n        p5.strokeWeight(2);\r\n\r\n        corePoints.forEach(p => {\r\n            drawPoint(p5, p);\r\n        });\r\n\r\n        staticPoints.forEach(p => {\r\n            drawPoint(p5, p);\r\n        });\r\n        \r\n        drawPoint(p5, dynamicPoint, '#16b8f3');\r\n    }\r\n\r\n    const leftMouseMove = (p5) => {\r\n        //Check if mouse is in bound\r\n        if (p5.mouseX >= 0 && p5.mouseX <= p5.width - display && p5.mouseY >= 0 && p5.mouseY <= p5.height) {\r\n            //Set new location for points\r\n            dynamicPoint.setLocation(p5.mouseX, p5.mouseY);\r\n            \r\n            //Set new nearest neighbors for userpoint\r\n            findNeighbors(neighbors);\r\n            \r\n            //Set new type for userpoints\r\n            findType();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <Sketch \r\n            setup={leftSetup}\r\n            draw={leftDraw}\r\n            mouseMoved={leftMouseMove}\r\n            windowResized={windowResized}>\r\n        </Sketch>\r\n\r\n        <ControlPanel\r\n            onRegenerate={onRegenerate}\r\n            onSetNeighbors={onSetNeighbors}/>\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\objectdetection\\ObjectDetection.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\AlgorithmCarousel.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\ThirdSegment\\TensorflowCard.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\ThirdSegment\\P5Card.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\ThirdSegment\\ConvNetCard.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\kmeanclustering\\ControlPanel.js",["248"],"export default (props) => {\r\n    return <div>\r\n        <button\r\n            className=\"button\"\r\n            onClick={() => props.onGenerateClusters()}\r\n            style={{width: \"100%\", background: \"#ecbcfd\", color: \"white\"}}>\r\n            Generate clusters\r\n        </button><br/>\r\n\r\n        <button\r\n            className=\"button is-info\"\r\n            onClick={() => props.onGenerateCores()}\r\n            style={{width: \"100%\", background: \"#ffafcc\", color: \"white\"}}>\r\n            Restart\r\n        </button>\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\linearregression\\LinearRegression.js",["249","250"],"import Model from './Model';\r\nimport Sketch from 'react-p5';\r\n\r\n//Store the data outside react component -> Not recommend\r\nlet inputs = [];\r\nlet outputs = [];\r\n\r\n//Linear model\r\nlet model = new Model();\r\n\r\n//Save model losses\r\nlet losses = [];\r\nlet hasConverged = false;\r\n\r\nexport default (props) => {\r\n    //Method for reseting sketch\r\n    const reset = () => {\r\n        model = new Model();\r\n        inputs = [];\r\n        outputs = [];\r\n        losses = [];\r\n        hasConverged = false;\r\n    }\r\n\r\n    //Method to handle windows resize\r\n    const windowResize = (p5) => {\r\n        p5.resizeCanvas(p5.windowWidth / 4, p5.windowWidth / 4);\r\n    }\r\n\r\n    //Methods for left canvas\r\n    const leftSetup = (p5, canvasParentRef) => {\r\n        p5.createCanvas(p5.windowWidth / 4, p5.windowWidth / 4).parent(canvasParentRef);\r\n    };\r\n\r\n    const leftDraw = (p5) => {\r\n        //Draw background\r\n        p5.background('black');\r\n\r\n        //Display appended points in arrays\r\n        p5.fill('#ffd7b5');\r\n        p5.stroke('white');\r\n        p5.strokeWeight(2);\r\n        for (let i = 0; i != inputs.length; ++i) {\r\n            let px = p5.map(inputs[i], 0, 1, 0, p5.width);\r\n            let py = p5.map(outputs[i], 0, 1, p5.height, 0);\r\n            p5.circle(px, py, 20);\r\n        }\r\n        \r\n        //Train network\r\n        if (inputs.length > 0 && !hasConverged) {\r\n            let loss = model.train(inputs, outputs);\r\n            losses.push(loss[0]);\r\n        }\r\n\r\n        //Check if model has converged\r\n        if (losses.length >= 2 && Math.abs(losses[losses.length - 1] - losses[losses.length - 2]) < 0.0000001) {\r\n            hasConverged = true;\r\n        }\r\n\r\n        //Draw regression line\r\n        drawRegressionLine(p5);\r\n    };\r\n\r\n    const drawRegressionLine = (p5) => {\r\n        //Get points and predictions\r\n        let points = [0, 1];\r\n        let predictions = model.predict(points);\r\n\r\n        //Map to canvas dimension\r\n        points = points.map(val => p5.map(val, 0, 1, 0, p5.width));\r\n        predictions = predictions.map(val => p5.map(val, 0, 1, p5.height, 0));\r\n\r\n        //Draw line\r\n        p5.strokeWeight(3);\r\n        p5.stroke('#ff9248');\r\n        p5.line(points[0], predictions[0], points[1], predictions[1])\r\n    }\r\n\r\n    const leftMouseClicked = (p5) => {\r\n        if (p5.mouseX > 0 && p5.mouseX <= p5.width && p5.mouseY > 0 && p5.mouseY <= p5.height) {\r\n            //Reset model\r\n            //model.reset();\r\n            hasConverged = false;\r\n\r\n            //Add new points\r\n            let x = p5.map(p5.mouseX, 0, p5.width, 0, 1);\r\n            let y = p5.map(p5.mouseY, 0, p5.height, 1, 0);\r\n\r\n            //Add to input\r\n            inputs.push(x);\r\n            outputs.push(y);\r\n\r\n            //Reset loss\r\n            losses = [];\r\n        }\r\n    }\r\n\r\n    //Method for right canvas\r\n    const rightSetup = (p5, canvasParentRef) => {\r\n        p5.createCanvas(p5.windowWidth / 4, p5.windowWidth / 4).parent(canvasParentRef);\r\n        p5.noStroke();\r\n    }\r\n\r\n    const rightDraw = (p5) => {\r\n        p5.background('white');\r\n        \r\n        //Draw the line loss plot\r\n        if (losses.length > 0) {\r\n            drawLosses(p5);\r\n        }\r\n    }\r\n\r\n    const drawLosses = (p5) => {\r\n        //Calculate the current x offset\r\n        let offset = 40;\r\n        let offSetChange = (p5.width - offset * 2) / (losses.length);\r\n\r\n        //Get the latest loss -> Display\r\n        p5.textSize(20);\r\n        p5.fill('#ddbea9');\r\n        p5.strokeWeight(1);\r\n        p5.textFont('Raleway');\r\n        p5.text('Loss: ' + losses[losses.length - 1].toFixed(4).toString(), 40, 20);\r\n\r\n        //Check if converge\r\n        if (hasConverged) {\r\n            p5.fill('#2a9d8f');\r\n            p5.noStroke();\r\n            p5.textFont('Raleway');\r\n            p5.text('Converged', 40, 40);\r\n        }\r\n\r\n        //Draw line chart showing plots\r\n        p5.noFill();\r\n        p5.stroke('#ddbea9');\r\n        p5.strokeWeight(2);\r\n        p5.beginShape();\r\n\r\n        losses.forEach((loss) => {\r\n            //Map the loss\r\n            let mappedLoss;\r\n            mappedLoss = p5.map(loss, 0, losses[0], p5.height, p5.width / 2);\r\n\r\n            //Draw vertex \r\n            p5.vertex(offset, mappedLoss);\r\n            //Increase offset\r\n            offset += offSetChange;\r\n        })\r\n\r\n        p5.endShape();\r\n    }\r\n\r\n    return <div>\r\n        <div style={{float: \"left\"}}>\r\n            <Sketch \r\n                setup={leftSetup} \r\n                draw={leftDraw}\r\n                mouseClicked={leftMouseClicked}\r\n                windowResized={windowResize}>\r\n            </Sketch>\r\n        </div>\r\n\r\n        <div style={{float: \"left\"}}>\r\n            <Sketch \r\n                setup={rightSetup} \r\n                draw={rightDraw}\r\n                windowResized={windowResize}>\r\n            </Sketch>\r\n        </div>\r\n\r\n        <div style={{clear: \"both\"}}></div>\r\n        <button \r\n            onClick={() => reset()} \r\n            className=\"button is-primary\" \r\n            style={{width: \"100%\", background: \"#F1FAEE\", color: \"black\"}}>\r\n            Reset\r\n        </button>\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\kmeanclustering\\cluster.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\neuralnetwork\\Model.js",["251","252"],"import convnetjs from 'convnetjs';\r\n\r\nexport default class Model {\r\n    constructor() {\r\n        this.createModel();\r\n    }\r\n\r\n    createModel() {\r\n        //Create layer def\r\n        let layer_definitions = [];\r\n\r\n        //Add layer\r\n        layer_definitions.push({\r\n            type: 'input',\r\n            out_sx: 1,\r\n            out_sy: 1,\r\n            out_depth: 2\r\n        });\r\n\r\n        layer_definitions.push({\r\n            type: 'fc',\r\n            num_neurons: 6,\r\n            activation: 'tanh'\r\n        });\r\n\r\n        layer_definitions.push({\r\n            type: 'fc',\r\n            num_neurons: 2,\r\n            activation: 'tanh'\r\n        });\r\n\r\n        layer_definitions.push({\r\n            type: 'softmax',\r\n            num_classes: 2\r\n        });\r\n\r\n        //Create network\r\n        this.model = new convnetjs.Net();\r\n        this.model.makeLayers(layer_definitions);\r\n\r\n        //Create trainner\r\n        this.trainer = new convnetjs.SGDTrainer(\r\n            this.model, {\r\n                learning_rate: 0.001,\r\n                mometum: 0.9,\r\n                batch_size: 10,\r\n                l2_decay: 0.001\r\n            }\r\n        );\r\n\r\n        //Create input\r\n        this.input = new convnetjs.Vol(1, 1, 2);\r\n    }\r\n\r\n    train(inputs, labels) {\r\n        let loss = 0;\r\n\r\n        for (let j = 0; j != 20; ++j) {\r\n            for (let i = 0; i != inputs.length; ++i) {\r\n                //Set data\r\n                this.input.w = inputs[i];\r\n\r\n                //Train\r\n                let result = this.trainer.train(this.input, labels[i]);\r\n\r\n                //Add loss\r\n                loss += result.loss;\r\n            }\r\n        }\r\n\r\n        //Average loss\r\n        return loss / inputs.length;\r\n    }\r\n\r\n    predict(input) {\r\n        //Set input\r\n        this.input.w = input;\r\n\r\n        //Get output\r\n        let result = this.model.forward(this.input, false);\r\n\r\n        //Softmax layer result\r\n        return result.w[1];\r\n    }\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\neuralnetwork\\ControlPanel.js",["253"],"import React, { useState } from 'react';\r\nimport StartStopButton from './StartStopButton';\r\n\r\nexport default (props) => {\r\n    const [type, setType] = useState(1);\r\n\r\n    //Call parent methods\r\n    const changeType = (type) => {\r\n        props.onChangeType(type);\r\n        //Rerender\r\n        setType(type);\r\n    }\r\n\r\n    const start = () => {\r\n        props.onStart();\r\n    }\r\n\r\n    const stop = () => {\r\n        props.onStop();\r\n    }\r\n\r\n    const reset = () => {\r\n        props.onReset();\r\n    }\r\n\r\n    return <div>\r\n            <div className=\"columns\" style={{width: \"80%\", margin: \"auto\", marginBottom: \"0.5em\", textAlign: \"center\"}}>\r\n                <div className=\"column\" style={{textAlign: \"center\"}}>\r\n                    <div\r\n                        className={type === 1 ? \"positive-chosen\" : \"positive\"}\r\n                        onClick={() => changeType(1)}>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"column\" style={{textAlign: \"center\"}}>\r\n                    <div\r\n                        className={type === 0 ? \"negative-chosen\" : \"negative\"}\r\n                        onClick={() => { changeType(0) }}>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"column\">\r\n                    <button\r\n                        className=\"button\"\r\n                        style={{width: \"50%\", background: \"#f9dcc4\", fontSize: \"1.2vw\"}}\r\n                        onClick={reset}>\r\n                        Clear all\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        <StartStopButton\r\n            color=\"#f9dcc4\"\r\n            start={start}\r\n            stop={stop}/>\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\logisticregression\\Model.js",["254","255"],"import convnetjs from 'convnetjs';\r\n\r\nexport default class Model {\r\n    constructor() {\r\n      this.createModel();\r\n    }\r\n    \r\n    createModel() {\r\n      //Create layer definition\r\n      let layer_defs = [\r\n        {\r\n          type: 'input',\r\n          out_sx: 1,\r\n          out_sy: 1,\r\n          out_depth: 2\r\n        },\r\n        {\r\n          type: 'softmax',\r\n          num_classes: 2\r\n        }\r\n      ];\r\n      \r\n      //Create model\r\n      this.model = new convnetjs.Net();\r\n      this.model.makeLayers(layer_defs);\r\n      \r\n      //Create input placeholder\r\n      this.input = new convnetjs.Vol(1, 1, 2);\r\n      \r\n      //Create trainer\r\n      this.trainer = new convnetjs.Trainer(\r\n        this.model,\r\n        {\r\n          method: 'sgd', \r\n          learning_rate: 0.01, \r\n          l2_decay: 0.001, \r\n          momentum: 0.9, \r\n          batch_size: 10\r\n        }\r\n      );\r\n    }\r\n    \r\n    train(inputs, labels) {\r\n      //Save the loss\r\n      let loss = 0;\r\n      \r\n      //Train for 20 iterations\r\n      for(let i = 0; i != 20; ++i) {\r\n        for (let j = 0; j != inputs.length; ++j) {\r\n          //Set input\r\n          this.input.w[0] = inputs[j][0];\r\n          this.input.w[1] = inputs[j][1];\r\n          \r\n          //Train -> Get loss\r\n          let result = this.trainer.train(this.input, labels[j]);\r\n          \r\n          //Add \r\n          loss += result.loss;\r\n        }\r\n      }\r\n      \r\n      //Get average loss\r\n      return loss / inputs.length;\r\n    }\r\n    \r\n    predict(x) {\r\n      //Set data\r\n      this.input.w[0] = x[0];\r\n      this.input.w[1] = x[1];\r\n      \r\n      //Run through model\r\n      let result = this.model.forward(this.input, false);\r\n      \r\n      //Convert to number\r\n      return result.w[1];\r\n    }\r\n  }","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\logisticregression\\ControlPanel.js",["256"],"import React, { useState } from 'react';\r\n\r\nexport default (props) => {\r\n    //Initialize the state\r\n    const [type, setType] = useState(1);\r\n\r\n    //Call parent methods\r\n    const changeType = (type) => {\r\n        props.onChangeType(type);\r\n        //Rerender\r\n        setType(type);\r\n    }\r\n\r\n    //Render\r\n    return <div className=\"columns\" style={{width: \"80%\", margin: \"auto\"}}>\r\n        <div className=\"column\" style={{textAlign: \"center\"}}>\r\n            <div\r\n                className={type === 1 ? \"positive-chosen\" : \"positive\"}\r\n                onClick={() => changeType(1)}>\r\n            </div>\r\n        </div>\r\n        \r\n        <div className=\"column\" style={{textAlign: \"center\"}}>\r\n            <div\r\n                className={type === 0 ? \"negative-chosen\" : \"negative\"}\r\n                onClick={() => { changeType(0) }}>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"column\">\r\n            <button\r\n                className=\"button\"\r\n                style={{width: \"50%\", background: \"#90e0ef\", fontSize: \"1.2vw\"}}\r\n                onClick={() => props.onReset()}>\r\n                Clear all\r\n            </button>\r\n        </div>\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\nearestneighbors\\point.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\nearestneighbors\\ControlPanel.js",["257"],"export default (props) => {\r\n    const onRegenerate = () => {\r\n        props.onRegenerate();\r\n    }\r\n\r\n    const onNeighborSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.onSetNeighbors(event.target.neighbors.value);\r\n    }\r\n\r\n    return <div className=\"columns\">\r\n        <div className=\"column is-three-fifths\">\r\n            <form \r\n                noValidate \r\n                autoComplete=\"off\" \r\n                onSubmit={onNeighborSubmit}\r\n                style={{width: \"100%\"}}>\r\n                    <div className=\"field has-addons\">\r\n                        <div className=\"control\">\r\n                            <input \r\n                                type=\"text\"\r\n                                name=\"neighbors\" \r\n                                placeholder=\"Enter the number of neighbors (K)\"\r\n                                className=\"input\"\r\n                                style={{fontSize: \"1.2vw\"}}/>\r\n                        </div>\r\n                        <div className=\"control\" style={{width: \"50%\"}}>\r\n                            <button\r\n                                className=\"button is-primary\"\r\n                                style={{width: \"100%\", background: \"#b7e4c7\", fontSize: \"1.2vw\"}}>\r\n                                Set neighbors\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n            </form>\r\n        </div>\r\n\r\n        <div className=\"column is-two-fifths\">\r\n            <button\r\n                className=\"button\"\r\n                style={{width: \"100%\", background: \"#52b788\", color: \"white\", fontSize: \"1.2vw\"}}\r\n                onClick={onRegenerate}>\r\n                    Regenerate cores\r\n            </button>\r\n        </div>\r\n    </div>\r\n}","C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\common\\point.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\NeuralNetworkCard.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\LinearRegressionCard.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\LogisticRegressionCard.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\ObjectDetectionCard.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\KNearestNeighborsCard.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Home\\SecondSegment\\KMeanCard.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\linearregression\\Model.js",[],"C:\\Users\\ryanz\\Codes\\ML\\Web\\Machine-Learning-React-F\\src\\components\\Algorithm\\Sketches\\neuralnetwork\\StartStopButton.js",[],{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":9,"column":3,"nodeType":"264","messageId":"265","endLine":9,"endColumn":7},{"ruleId":"262","severity":1,"message":"266","line":1,"column":8,"nodeType":"264","messageId":"265","endLine":1,"endColumn":13},{"ruleId":"262","severity":1,"message":"267","line":1,"column":20,"nodeType":"264","messageId":"265","endLine":1,"endColumn":26},{"ruleId":"262","severity":1,"message":"268","line":3,"column":8,"nodeType":"264","messageId":"265","endLine":3,"endColumn":14},{"ruleId":"269","severity":1,"message":"270","line":26,"column":9,"nodeType":"271","messageId":"272","endLine":26,"endColumn":86},{"ruleId":"262","severity":1,"message":"273","line":2,"column":8,"nodeType":"264","messageId":"265","endLine":2,"endColumn":12},{"ruleId":"262","severity":1,"message":"263","line":5,"column":9,"nodeType":"264","messageId":"265","endLine":5,"endColumn":13},{"ruleId":"262","severity":1,"message":"274","line":2,"column":8,"nodeType":"264","messageId":"265","endLine":2,"endColumn":13},{"ruleId":"262","severity":1,"message":"275","line":1,"column":17,"nodeType":"264","messageId":"265","endLine":1,"endColumn":25},{"ruleId":"276","severity":1,"message":"277","line":25,"column":1,"nodeType":"278","endLine":282,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":34,"column":31,"nodeType":"281","messageId":"282","endLine":34,"endColumn":33},{"ruleId":"279","severity":1,"message":"280","line":53,"column":27,"nodeType":"281","messageId":"282","endLine":53,"endColumn":29},{"ruleId":"279","severity":1,"message":"280","line":107,"column":38,"nodeType":"281","messageId":"282","endLine":107,"endColumn":40},{"ruleId":"276","severity":1,"message":"277","line":30,"column":1,"nodeType":"278","endLine":255,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":53,"column":27,"nodeType":"281","messageId":"282","endLine":53,"endColumn":29},{"ruleId":"279","severity":1,"message":"280","line":54,"column":31,"nodeType":"281","messageId":"282","endLine":54,"endColumn":33},{"ruleId":"279","severity":1,"message":"280","line":81,"column":27,"nodeType":"281","messageId":"282","endLine":81,"endColumn":29},{"ruleId":"279","severity":1,"message":"283","line":126,"column":24,"nodeType":"281","messageId":"282","endLine":126,"endColumn":26},{"ruleId":"276","severity":1,"message":"277","line":21,"column":1,"nodeType":"278","endLine":240,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":54,"column":27,"nodeType":"281","messageId":"282","endLine":54,"endColumn":29},{"ruleId":"279","severity":1,"message":"280","line":94,"column":27,"nodeType":"281","messageId":"282","endLine":94,"endColumn":29},{"ruleId":"279","severity":1,"message":"280","line":95,"column":31,"nodeType":"281","messageId":"282","endLine":95,"endColumn":33},{"ruleId":"279","severity":1,"message":"283","line":119,"column":31,"nodeType":"281","messageId":"282","endLine":119,"endColumn":33},{"ruleId":"276","severity":1,"message":"277","line":25,"column":1,"nodeType":"278","endLine":295,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":102,"column":31,"nodeType":"281","messageId":"282","endLine":102,"endColumn":33},{"ruleId":"279","severity":1,"message":"280","line":167,"column":27,"nodeType":"281","messageId":"282","endLine":167,"endColumn":29},{"ruleId":"276","severity":1,"message":"277","line":1,"column":1,"nodeType":"278","endLine":17,"endColumn":2},{"ruleId":"276","severity":1,"message":"277","line":15,"column":1,"nodeType":"278","endLine":179,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":43,"column":27,"nodeType":"281","messageId":"282","endLine":43,"endColumn":29},{"ruleId":"279","severity":1,"message":"280","line":58,"column":27,"nodeType":"281","messageId":"282","endLine":58,"endColumn":29},{"ruleId":"279","severity":1,"message":"280","line":59,"column":31,"nodeType":"281","messageId":"282","endLine":59,"endColumn":33},{"ruleId":"276","severity":1,"message":"277","line":4,"column":1,"nodeType":"278","endLine":57,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":48,"column":24,"nodeType":"281","messageId":"282","endLine":48,"endColumn":26},{"ruleId":"279","severity":1,"message":"280","line":49,"column":27,"nodeType":"281","messageId":"282","endLine":49,"endColumn":29},{"ruleId":"276","severity":1,"message":"277","line":3,"column":1,"nodeType":"278","endLine":39,"endColumn":2},{"ruleId":"276","severity":1,"message":"277","line":1,"column":1,"nodeType":"278","endLine":47,"endColumn":2},"no-native-reassign",["284"],"no-negated-in-lhs",["285"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'useRef' is defined but never used.","'Navbar' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'logo' is defined but never used.","'Panel' is defined but never used.","'useState' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]